import{BufferGeometry,Float32BufferAttribute,Vector3}from"./three.module.js";class ParametricGeometry extends BufferGeometry{constructor(t=((t,e,r)=>r.set(t,e,Math.cos(t)*Math.sin(e))),e=8,r=8){super(),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:r};const o=[],s=[],c=[],u=[],i=1e-5,n=new Vector3,a=new Vector3,f=new Vector3,m=new Vector3,h=new Vector3;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const l=e+1;for(let o=0;o<=r;o++){const l=o/r;for(let r=0;r<=e;r++){const o=r/e;t(o,l,a),s.push(a.x,a.y,a.z),o-i>=0?(t(o-i,l,f),m.subVectors(a,f)):(t(o+i,l,f),m.subVectors(f,a)),l-i>=0?(t(o,l-i,f),h.subVectors(a,f)):(t(o,l+i,f),h.subVectors(f,a)),n.crossVectors(m,h).normalize(),c.push(n.x,n.y,n.z),u.push(o,l)}}for(let t=0;t<r;t++)for(let r=0;r<e;r++){const e=t*l+r,s=t*l+r+1,c=(t+1)*l+r+1,u=(t+1)*l+r;o.push(e,s,u),o.push(s,c,u)}this.setIndex(o),this.setAttribute("position",new Float32BufferAttribute(s,3)),this.setAttribute("normal",new Float32BufferAttribute(c,3)),this.setAttribute("uv",new Float32BufferAttribute(u,2))}}export{ParametricGeometry};